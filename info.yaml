# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID
  source_files:        # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. Source files must be in ./src
    - top_ISCAS89.v
    - s27.v
    - dff.v
  top_module:  "top_ISCAS89"      # put the name of your top module here, make it unique by prepending your github username

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it.
#
# Here is an example: https://github.com/mattvenn/tinytapeout_m_segments/blob/main/info.yaml
#
# This info will be automatically collected and used to make a datasheet for the chip.
documentation: 
  author:       "FNE"      # Your name
  discord:      "FNE#0565"      # Your discord handle - make sure to include the # part as well
  title:        "ISCAS89-S27"      # Project title
  description:  "ISCAS89 benchmarks, s298 circuit is sequential circuit example"      # Short description of what your project does
  how_it_works: "take PIs(3) and show the results in POs(6)."      # Longer description of how the project works
  how_to_test:  "Enter a tree Primary Input(PI)s by switches, set VDD switch to 1 and and set GND switch to 0. The Primary output(PO)s result will appear in led."      # Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  external_hw:  "None"      # Describe any external hardware needed
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  doc_link:     "https://github.com/Esirci/ISCAS89"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0     # Clock frequency in Hz (if required) we are expecting max clock frequency to be ~6khz. Provided on input 0.
  picture:      ""      # relative path to a picture in your repository
  inputs:               # a description of what the inputs do
    - io_in[0]      #clock 
    - io_in[1]      #GO from PIs
    - io_in[2]      #G1 from PIs
    - io_in[3]      #G2 from PIs
    - io_in[4]      #G3 from PIs
    - io_in[5]      #GND
    - io_in[6]      #VDD 
  outputs:
    - io_out[0]     #G17 from PO
    - none

